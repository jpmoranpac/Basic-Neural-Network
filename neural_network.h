#include <vector>
#include <algorithm>
#include <random>

/// @brief A single neuron in the neural network. Composes the Layer class.
///        Contains bias, weights, and the activation function and activation
///        function derivative.
class Neuron {
private:
    // Bias and weights, updated by the Backwards method
    double bias = 0.0;
    std::vector<double> weights;
    // Activtion function, to calculate forward pass
    double (*ActivationFunction_)(double);
    // Activtion function derivative, to calculate back propagation
    double (*ActivationFunctionDerivative_)(double);

    // Store last input and output, required for back propagation
    std::vector<double> latest_input;
    double latest_output = 0.0;

public:
    /// @brief Constructor
    /// @param num_input_nodes number of neurons that input to this neuron
    /// @param ActivationFunction for forward pass
    /// @param ActivationFunctionDerivative for back propagation
    Neuron(const int& num_input_nodes,
           double (*ActivationFunction)(double),
           double (*ActivationFunctionDerivative)(double));

    /// @brief Forward pass using the activation function provided during
    ///        initialisation
    /// @param inputs inputs to this neuron
    /// @return activated output
    double Forwards(const std::vector<double>& inputs);

    /// @brief Backwards pass and back propagation. Will update the weights and
    ///        bias. Assumes forward pass has run.
    /// @param mean_dCost_dOutpuy the partial derivative of the cost to the
    ///                           network relative to the last output of this
    ///                           neuron
    /// @return vector of network costs relative to the output of each neuron
    ///         in the previous layer connected to this neuron
    std::vector<double> Backwards(const double& mean_dCost_dOutpuy);

    /// @brief Print a summary of this neuron to the console
    /// @return void
    const void PrintNeuron() const;
};

/// @brief A single layer in the neural network. Composed of Neurons and 
///        composes the Neural Network class.
class Layer {
private:
    // Neurons in this layer. Index order is important, must be retained
    // throughout operation
    std::vector<Neuron> neurons;
    // Number of neurons in the previous layer. Number of inputs if this is the
    // first layer.
    int num_inputs = 0;
    
public:
    /// @brief Constructor
    /// @param num_input_nodes number of neurons in the previous layer or number
    ///                        of inputs if this is the first layer
    /// @param num_neurons number of neurons in this layer
    /// @param ActivationFunction for each neuron used in forward pass
    /// @param ActivationFunctionDerivative for each neuron used in back
    ///                                     propagation
    Layer(const int& num_input_nodes, const int& num_neurons,
          double (*ActivationFunction)(double),
          double (*ActivationFunctionDerivative)(double));

    /// @brief Forwards pass
    /// @param inputs to this layer
    /// @return inputs to the next layer
    std::vector<double> Forwards(const std::vector<double>& inputs);

    /// @brief Backwards pass and back propagation. Will update weights and bias
    ///        of each neuron in this layer. Assumes forward pass has run.
    /// @param dCost_dOutput the partial derivative of the cost to the
    ///                      network relative to the last output of each neuron
    ///                      in this layer
    /// @return vector of network costs relative to the output of each neuron
    ///         in the previous layer
    std::vector<std::vector<double>> Backwards(
                        const std::vector<std::vector<double>>& dCost_dOutput);
                        
    /// @brief Print a summary of this layer to the console
    /// @return void
    void PrintLayer() const;
};

/// @brief a fully connected Neural Network composed of Layers, which is
///        composed of Neurons.
class NeuralNetwork {
private:
    // Layers in the network. Index order represents the layer order.
    std::vector<Layer> layers;
    // Last output generated by this network
    std::vector<double> last_output;
    // Number of inputs to this network
    int num_inputs_ = 0;
    // Number of outputs to this network
    int num_outputs_ = 0;
    
public:
    /// @brief Constructor
    /// @param num_inputs number of inputs
    /// @param num_outputs number of outputs, determines the number of neurons
    ///                    in the final layer
    /// @param neurons_per_layer vector representing the number of neurons to
    ///                          create in each hidden layer
    NeuralNetwork(const int& num_inputs, const int& num_outputs, 
                  const std::vector<int>& neurons_per_layer);

    /// @brief Forwards pass
    /// @param input inputs to the network
    /// @return output of the network
    std::vector<double> Forwards(const std::vector<double>& input);

    /// @brief Backwards pass and back propagation, will update weights and bias
    ///        of each neuron in the network. Assumes forward pass has run.
    /// @param target target results to train against
    void Backwards(const std::vector<double>& target);

    /// @brief Calculates mean squared error of the last output compared to the
    ///        target result.
    /// @param target desired result
    /// @return mean squared error of each output
    std::vector<double> CalculateError(const std::vector<double>& target);

    /// @brief Calculates the derivative of network cost relative to each
    ///        output from the network
    /// @param target desired result to train against
    /// @return the derivative of network cost relative to each output
    std::vector<double> Calculate_dCostdOutput(
                                            const std::vector<double>& target);

    /// @brief Print a summary of this network to the console
    /// @return void
    void PrintNetwork() const;
};